!!! XML
!!!
%div#11-chapter.chapter{:xmlns=>"http://www.w3.org/1999/xhtml"}
  %h1 Au commencement était... le Génie Logiciel
  :markdown  

    De même qu'il existe une Histoire de France ou une Histoire des sciences, il existe une Histoire, fût-elle brève, de l'activité qui consiste à créer des logiciels. Mais contrairement au deux premières, on a parfois l'impression que ceux qu'elle concernent - nous, les programmeurs, analystes, développeurs, ingénieurs; les testeurs, les chefs de projets, etc. - ne s'y intéressent quasiment pas. Notre profession semble tourner le dos à son passé.
    Ainsi des idées techniques nous sont-elles présentées comme "neuves" et "révolutionnaires" alors que, pour qui s'est penché sur l'historique de la discipline, il ne s'agit que de réchauffé: des idées présentes dans tel ou tel dialecte de Lisp ou de Smalltalk depuis trente ou quarante ans. (Si vous ne me croyez pas, penchez-vous sur les comparaisons entre XML et les "s-expressions" ou entre la Programmation Orientée Aspects et les MOP ou Meta-Object Protocols.) On pourrait aussi se demander combien, parmi ceux qui se réclament aujourd'hui du mouvement Agile, ont conscience de ses prédécesseurs, tels le RAD ou le Processus en Spirale dû à Barry Boehm.

    De façon générale, notre profession tend à considérer toute idée âge de plus de cinq ans comme obsolète et digne de peu d'intérêt, et c'est sans doute en partie pour cela qu'on a parfois l'impression que l'industrie du logiciel est le jouet de cycles qui relèvent plus de la mode que du progrès.

    ## Retour aux sources

    Pourtant, il semble impossible de comprendre les enjeux que recouvrent le terme "Agile", et les raisons qui ont poussé un nombre considérable de professionnels à se mobiliser pour le faire connaître, sans en comprendre les racines lointaine, et son positionnement par rapport à ces origines.
    Parmi les idées qui ont façonné les métiers du logiciel, une l'a fait de façon particulièrement forte et durable, l'idée du Génie Logiciel. Le logiciel relève-t-il vraiment d'une activité d'ingénieur? La question, lancinante, revient comme un serpent de mer dans les conférences consacrées au sujet, mais elle est rarement traitée sous un angle historique.
    Rares sont ceux qui semblent conscients que le "logiciel" ayant lui-même une histoire d'à peine plus d'un demi-siècle, il a bien fallu inventer l'expression Génie Logiciel; que celle-ci ne va pas de soi, et que l'application des techniques de l'ingénieur au domaine du logiciel relève, non pas des lois de la nature, mais d'une décision à laquelle il a fallu rallier divers groupes: des militaires, des scientifiques, des groupes industriels.
    Nous allons donc brièvement rappeler la discrète histoire du Génie Logiciel. C'est une excursion qui a de quoi satisfaire les esprits curieux, même s'il devaient en ressortir plus convaincus que jamais de la pertinence de ce mariage. Mais nous verrons que cette histoire a de quoi alimenter bien des doutes...

    ## De Garmisch à Rome

    On fait en général remonter l'histoire de la discipline à l'année 1968, et en particulier à une conférence organisée sous l'égide de l'OTAN dans le cadre enchanteur de Garmisch-Partenkirchen, une station de sports d'hiver, aux pieds des montagnes de Bavière.

    Il y eut non pas une mais deux conférences de l'OTAN sur le Génie Logiciel, à un an d'intervalle; même les rares auteurs qui font référence à la conférence de 1968 semblent ignorer celle qui se tient en 1969 à Rome.

    Les [actes des deux conférences](http://homepages.cs.ncl.ac.uk/brian.randell/NATO/) sont disponibles sur le Web, dans une version PDF d'une qualité remarquable alors que la plupart des documents de cette époque sont en général simplement scannés, donc non indexés ni "cherchables". Ils méritent d'être lus avec attention. (On y trouve par exemple ce conseil de Peter Naur qui recommande de s'intéresser aux idées d'un jeune architecte, Christopher Alexander. Le même Alexander qui sera redécouvert vingt anx plus tard par un certain Kent Beck, donnant naissance au mouvement des Design Patterns.) 

    Structurés d'une façon très systématique, ils couvrent la quasi-totalité des préoccupations encore d'actualité aujourd'hui quant à la façon de mener des projets dans le domaine du logiciel. Environ cinquante experts venus de onze pays sont présents. Parmi les participants on compte des sommités comme Edsger Dijkstra (connu pour sa campagne contre le "goto" et en faveur de la programmation structurée), Alan Perlis (créateur d'Algol et auteur de proverbes qui sont au logiciel ce qu'une certaine tradition japonaise est au jeu de Go) ou Peter Naur (co-crédité de l'invention de la notation BNF pour décrire les langages de programmation).

    Ces documents sont éloquents quant au degré de controverse que suscite la question du génie logiciel. Voici une citation d'un participant: "La chose la plus dangereuse dans le domaine du logiciel est l'idée, apparemment presque universelle, que vous allez spécifier ce qu'il y a à réaliser, puis le réaliser. Voilà d'où viennent la plupart de nos ennuis. On appelle réussis les projets qui sont conformes à leurs spécifications. Mais ces spécifications s'appuient sur l'ignorance dans laquelle étaient les concepteurs avant de démarrer le boulot!"
    Les titres de la conférence de 1968 reflètent un certain degré d'incertitude: "Réflexions sur le séquencement de l'écriture d'un logiciel", "Vers une méthodologie de la conception", "Quelques réflexions sur la production de systèmes de grande taille". Certes la plupart des participants utilisent l'expression "Génie Logiciel" comme si elle allait de soi, et des lacunes sont déjà apparentes (on parle notamment assez peu du facteur humain), mais on peut deviner une véritable controverse sur les grandes lignes de ce qui préoccupera cette discipline.
    En 1969 les titres des articles publiés ont gagné en assurance. "Critères pour un langage de description de systèmes", "La conception de systèmes très fiables en exploitation continue", etc. Mais c'est surtout en lisant entre les lignes qu'on décèle un changement, et notamment en lisant "The Writing of the NATO reports" de Brian Randell, une sorte de "making of" datant de 1996. Une drôle d'ambiance règne apparemment à la conférence de 1969, mais on ne peut que la deviner dans la description à demi-mot qu'en fait Randell:
    > Contrairement à la première conférence, ou il était tout à fait clair que le terme de Génie Logiciel reflétait l'expression d'un besoin plutôt qu'une réalité, à Rome on avait déjà tendance à en parler comme si le sujet existait déjà. Et, pendant la conférence, l'intention cachée des organisateurs se précisa, à savoir: persuader l'OTAN de financer la mise en place d'un Institut International du Génie Logiciel. Cependant les choses ne se passèrent pas comme ils l'avaient prévu. Les sessions qui étaient censées fournir les preuves d'un large et ferme soutien à cette initiative furent en fait dominées par le plus grand scepticisme, au point qu'un des participants, Tom Simpson de chez IBM, écrivit une superbe et courte satire intitulée "Masterpiece Engineering" (Ingénierie du Chef-d'Oeuvre).
    Un article qui parlait, par exemple, de mesurer la productivité des peintres en nombre de coups de pinceau par journée. Et Randell d'ajouter que les organisateurs réussirent à le "persuader" d'omettre cet article satirique de Tom Simpson des actes officiels!
    L'acte de naissance définitif du Génie Logiciel ayant ainsi été associé à un acte de censure, Randell ajoute qu'il s'interdit pendant la décennie qui suivit d'utiliser le terme, le jugeant injustifié. Il n'acceptera de revenir sur cette décision que pour une conférence marquant en 1979 le dixième anniversaire de Rome, où il profita de l'occasion pour adresser à Barry Boehm, alors la "nouvelle star" de la discipline, une série de piques, que Boehm "ignora soigneusement, je suis navré de le rapporter, à moins qu'il n'ait pas été en mesure de les reconnaitre comme telles".

    ## Quarante ans de crise

    Comment expliquer, malgré ces débuts au mieux hésitants, le succès qu'allait connaître par la suite l'idée même de Génie Logiciel?

    Il est parfois difficile de faire le tri, s'agissant de ce sujet, entre réalité et mythologie. L'époque des pionniers étant relativement récente, l'essentiel de ce qu'il en reste est constitué de ce que les historiens professionnels appellent la littérature *primaire* - des écrits que nous devons à ceux-là même qui sont été les acteurs de ces événements, qui ont participé aux projets ou assisté aux conférences de cette époque. Le regard que portent des auteurs tel que Frederick Brooks ou Edsger Dijkstra sur le sujet est nécessairement partial: c'est sur leur recommandation que la discipline se met en place. Plus récemment, des historiens ont commencé à proposer un regard plus distancié sur ces jeunes années du Génie Logiciel.

    L'un des facteurs qui contribuera pendant cette première décennie à convaincre une large population de sy'intéresser sera, selon ces historiens, l'utilisation permanente d'une "rhétorique de crise": on se réfère à chaque occasion à la "Crise du Logiciel".

    Cette soi-disant Crise se manifestait par divers aspects. Les projets de développement dépassaient les délais et budgets impartis, les logiciels produits étaient de mauvaise qualité et leurs performances insuffisantes, ils ne répondaient pas aux exigences exprimées, ils étaient difficiles à faire évoluer. La situation était catastrophique et il y avait urgence à y mettre bon ordre!

    La réalité, telle que la rapportent les historiens, est plus nuancée. D'une part, les seuls à agiter le chiffon rouge de la Crise à l'époque furent sans doutes les mêmes personnes qui militèrent pour la création d'un Institut du Génie Logiciel. Les actes des deux conférences, relèvent les historiens, ne font quasiment pas référence à une "crise" et certains des intervenants cherchent même explicitement à relativiser certains constats parmi les plus alarmistes.

    ## Sur-place

    Plus de quarante ans après, les "symptômes" de la "crise" semblent persister, inchangés. D'importantes dérives continuent à frapper des projets informatiques de grande ampleur: ainsi [Chorus](http://fr.wikipedia.org/wiki/Chorus_(logiciel)), le nouveau système d'information destiné à toutes les administrations françaises, défraie la chronique en 2010 par ses dérapages considérables.

    Le projet prévu sur quatre ans démarre en Mars 2006, son coût annoncé aux parlementaires à l'origine est déjà important: 600M€. Dès le début 2008 apparaissent les premières dérives et l'on apprend que des retards sont à envisager, que le budget serait dépassé. Fin 2008, une "mise au point" du ministère permet d'apprendre qu'en fait le budget communiqué ne tenait pas compte des coûts de fonctionnement, chiffrés à 100M€ annuels sur cinq ans: la facture serait donc de 1,1Md€. Un petit oubli, en somme. (Un rapport parlementaire de juillet 2010, un peu inquiétant, recommande "d'actualiser l'évaluation du coût complet de Chorus" - ce qui laisse supposer que ce coût réel est encore inconnu à l'heure actuelle...) Les délais s'accumulent, et dès 2009 Chorus qui devait être déployé entièrement à partir de 2010 se voit repoussé à janvier 2011, et ce malgré une révision à la baisse de ses objectifs fonctionnels.
    Il y a pire: Chorus... ne fonctionne pas. Plus exactement son installation perturbe le paiement des factures aux fournisseurs des administrations. Alors que l'Etat gronde le secteur privé sur les délais de paiement, son propre système d'information met en difficulté de très nombreuses PME qui se retrouvent dans l'incapacité d'encaisser leur dû: un comble! Est-ce une difficulté transitoire? C'est en tout cas un transitoire qui dure... et la Cour des Comptes émet fin 2010 des réserves sur l'éventualité que Chorus puisse un jour assumer pleinement la comptabilité de l'Etat français.

    Ce n'est là que l'exemple le plus récent et le plus visible, mais chacun au sein de la profession peut rapporter des "histoires de guerre" du même type, concernant des projets parmi les plus petits et les plus simples aussi bien que les plus importants.

    Combien de livres, d'articles ou de présentations dans la profession ne commencent-il pas par l'évocation du fameux (et controversé) rapport CHAOS, édité par le Standish Group, et qui est la source quasi systématique des "statistiques" sur le taux d'échec des projets informatiques: vers la fin des années 2000, moins d'un tiers des projets menés par les entreprises interrogées pouvaient selon le rapport être considéré comme réussis; un taux cependant en amélioration par rapport aux années 1990 où un projet sur six seulement entrait dans cette catégorie.

    Cependant les chiffres et la méthodologie du Standish Group ont été vivement critiquées. En effet, s'agissant de projets de développement logiciel, ou même plus généralement dans les technologies de l'information en général, la mesure précise de différentes quantités pertinentes qui servent d'indicateurs objectifs (productivité, délais, ROI) est rendue difficile par la complexité même du sujet.

    On peut donc difficilement se prononcer sur la *réalité* de la crise elle-même, mais il est évident que le *discours de crise* a joué, et continue de jouer, un rôle important de justification.

    ## Monopole

    Malgré ce peu de succès à apporter des solutions à la "crise", la discipline devient une institution et continue à bien se porter pendant les années 70, 80, 90. Il faut dire (et, à regret car ils sont passionnants, sans rentrer dans le détail) que bien des bouleversements caractérisent ces décennies, qui rendent difficile l'évaluation des progrès réellement accomplis. L'informatique des années 1960 concerne encore surtout des systèmes militaires ou scientifiques; elle va dans un premier temps se diffuser vers les milieux d'affaires, subir de profondes mutations lorsque s'imposent successivement l'ordinateur personnel, les interfaces graphiques, les réseaux d'entreprise et enfin l'Internet. De façon moins visible extérieurement, des innovations telles que la programmation objet ou UML seront tour à tour accueillies comme "LA solution" à tous les maux qui constituent la "crise".

    A chacune de ces révolutions, à chaque mode, succède une désillusion, et la prise de conscience qu'une seule innovation ne saurait suffire: selon l'expression consacrée "il n'y a pas de balle d'argent". (Ceux qui se déclarent sceptiques quant à la réalité de la crise sont enclins à dire: "tant pis, de toutes façons il n'y a jamais eu de loup-garou non plus!".)

    Voilà le contexte dans lequel, discrètement d'abord avant d'éclater au grand jour au début 2001, se développe un nouveau courant (une nouvelle mode?) qui prendra le nom de "méthodes Agiles" à l'issue d'une rencontre entre quelques auteurs, "gourous" ou consultants qui cherchent, bien que chacun d'une "chapelle" différente, une synthèse entre leurs différentes approches. Cela se passe aux Etats-Unis, à Snowbird, une... station de ski. L'histoire ne se répète pas, dit-on, elle bégaie.