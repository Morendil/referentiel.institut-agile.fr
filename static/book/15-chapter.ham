!!! XML
!!!
%div#15-chapter.chapter{:xmlns=>"http://www.w3.org/1999/xhtml"}
  %h1 Comment utiliser le référentiel
  :markdown  

    Nous voici donc prêts à aborder le contenu de la démarche Agile, les pratiques elles-mêmes. Comme indiqué plus haut, les chapitres sont destinés à être lus en "accès direct" plutôt que séquentiellement: vous lirez ainsi la description d'une pratique vous intéressant en particulier. Suivant votre situation, vous pourrez vous intéresser à des aspects différents d'une même pratique; ci-dessous, nous abordons le schéma auxquel se conforme chacun des chapitres restants.

    ## Canevas de description d'une compétence

    Voici les éléments qui semblent pertinents pour décrire une pratique agile. Nous allons prendre pour exemple une pratique Scrum relativement récente, la [Définition de 'fini'](#sashimi).    Parlons d'abord, même si ce n'est pas la première chose qu'on lira (ce sera le nom, abordé plus bas), du **descriptif** succint d'une pratique. Le référentiel n'a pas vocation à se substituer aux livres, articles et contenus de formation qui donnent une définition plus précise et plus détaillée de chaque pratique, compétence et outil abordés. Il s'agit donc ici de se borner à un paragraphe court qui reprend l'essentiel.    Un autre exercice délicat consiste à choisir un nom canonique pour cette pratique. La plupart de nos collègues francophones utilisent un demi-anglicisme, et parlent de "Definition du Done", quand ce n'est pas le terme anglais qu'ils utilisent directement. Quand c'est possible, il est préférable de vraiment traduire, c'est pourquoi nous préférons "fini" à "done".    Le but n'est pas de faire évoluer le lexique, même s'il est tentant de chercher jouer de son influence... Notre préférence irait peut-être au terme "Liste Sashimi", le terme "sashimi" bénéficie actuellement d'un petit effet de mode, et comme l'illustre [le site Web](http://www.productsashimi.com/) d'un collègue coach, J.B. Rainsberger il est parlant et plaisant. Mais cette appellation pour désigner une pratique spécifique reste tout à fait marginale.    En tout cas, pour toutes ces raisons, il semble important de recenser les **synonymes** connus qui désignent la même pratique ou des pratiques tellement voisines que nous les considérerons comme une seule (par exemple le Sprint de Scrum ne diffère pas assez de l'Itération d'XP pour y voir deux pratiques distinctes).    Une pratique s'accompagne généralement d'un certain nombre d'**erreurs classiques**, de contre-sens et d'abus. En rencensant les plus courantes, on donne de la profondeur à la description brève (mais toujours sans chercher à se substituer à un contenu plus pédagogique), et on encourage à se méfier des imitations et contrefaçons.    Conformément à la division "principes, concepts, pratiques, compétences" on fera ressortir de cette pratique le côté visible: on sait qu'une équipe utilise une pratique quand on peut le constater par des signes observables dans l'espace de travail, par exemple une feuille de paperboard sur laquelle on peut lire la (ou les) définition(s) de "fini".    (C'est là un arbitrage, certaines personnes diront qu'il suffit qu'une équipe connaisse sa définition de "fini" et que tout le monde soit d'accord. Pourquoi pas: dans ce cas, le signe observable consiste à s'asseoir avec plusieurs personnes dans l'équipe et leur demander de réciter cette définition. Il est presque certain que dans ces conditions chacun donnera une définition de "fini" légérement différente; ce qui nous renvoie donc à la rubrique "erreurs classiques".)    Comme indiqué précédemment, une pratique ne vaut que par les **bénéfices** qu'elle confère au projet. Décider, en conscience, d'adopter une pratique, c'est s'engager à vérifier quelques temps après si ces bénéfices ont bien été obtenus, et remettre en question sa vision du fonctionnement du projet si ce n'est pas le cas. L'objectif n'est pas d'utiliser telle et telle pratique pour le plaisir de s'identifier comme "Agile" mais bel et bien d'obtenir ces bénéfices. Notamment, chaque pratique se caractérisera aussi par un coût d'utilisation plus ou moins grand et une efficacité plus ou moins nette: notre objectif, idéalement, est d'obtenir avec le minimum de pratiques, exigeant le minimum d'effort pour les adopter, le plus grand nombre de bénéfices possibles sur les aspects du projet qui nous intéressent. Peu importe d'où viennent ces pratiques - de Scrum, d'XP, de Lean...    Il est cependant important, pour plusieurs raisons approfondies plus loin, de positionner les pratiques dans un contexte historique, de retracer leurs **origines** et leur évolution. La "définition de 'fini'" ne fait partie de Scrum que depuis quelques années, et son intégration définitive dans les pratiques considérées comme indispensables ne remonte qu'à 2006-2007 environ d'après les différentes sources disponibles: listes de diffusion, blogs, livres sur le sujet. Ou bien il est possible de pratiquer Scrum sans utiliser une définition explicite de "fini" - auquel cas on doit se demander s'il est nécessaire dans un contexte particulier d'utiliser cette pratique - ou bien cet évolution s'explique par le fait que seules les équipes qui l'utilisaient réussissaient dans leur application de Scrum, et qu'on a finalement mis le discours en conformité avec la pratique. La différence entre ces deux scénarios n'est pas anodine.

    ## Bibliographie scientifique    Un dernier élément, mais qui a son importance, consiste à relever les travaux scientifiques pertinents. Ceux-ci sont de deux types: théoriques ou conceptuels, qui vont donner un éclairage plus précis et plus rigoureux sur les mécanismes par lesquels une pratique produit ses effets; et, les plus importants, empiriques, qui vont constater dans des conditions contrôlées la réalité et l'importance quantitative de ces prétendus effets.    Cette validation scientifique n'est pas un prérequis à l'utilisation de pratiques qui ont montré leur efficacité. J'aurai l'occasion de revenir sur ce sujet, mais il faut bien constater que le dialogue entre les chercheurs qui s'intéressent à la dynamique des projets agiles d'une part, et les praticiens d'autre part, n'est pas encore d'une grande qualité. On ne s'étonnera pas, par conséquent, que la recherche tarde à s'intéresser à ce que les praticiens trouvent évident depuis longtemps, ou que ces derniers ignorent des résultats que les chercheurs considèrent comme acquis. Mais la convergence au fil du temps entre ces deux communautés me semble indispensable.    Si les pratiques sont réellement utiles et produisent leurs effets de façon fiable, alors on doit être en mesure de le prouver; sinon c'est qu'elles ne sont qu'un placebo, et leur utilisation est nuisible puisqu'elles mobilisent une partie de l'énergie des intervenants d'un projet, qu'ils pourraient consacrer à d'autres pratiques qui elles sont réellement utiles.

    Les travaux les plus importants sont mentionnés dans le chapitre correspondant aux quelques pratiques qui on fait l'objet de telles recherches; une bibliographie reprend l'ensemble de ces références, en annexe.
    ## Canevas de description d'une compétence    Que dire de plus pour éclairer précisément une compétence, par rapport à ce qu'on peut dire concernant une pratique? Notre exemple sera le [Refactoring](#refactoring), compétence centrale dans Extreme Programming.    Tout d'abord, une compétence est aussi une pratique: elle se constate à certains signes visibles, elle apporte un bénéfice présumé, qui peut être démontré par des études empiriques. Le canevas de description d'une compétence est donc en règle générale un sur-ensemble de celui qui vaut pour les pratiques.    La principale différence est qu'une compétence nous amènes à distinguer des **niveaux de performance**. Cela n'a pas tellement de sens de dire qu'une personne ou même une équipe est "douée" pour établir sa "definition of Done". Soit elle a une définition, et la trouve satisfaisante; soit elle n'en a pas. Il n'y a pas grand chose à dire à une équipe qui lui permettra d'améliorer sa pratique de la définition. (Certes, une équipe peut avoir une mauvaise définition de "fini", si elle est incomplète ou au contraire trop rigoureuse. Pour autant on ne parlera pas d'améliorer une compétence, mais simplement d'améliorer... le document!)    Au contraire, une personne peut maîtriser plus ou moins bien les différentes techniques du refactoring, et s'améliorer dans ce domaine, soit par la recherche et la pratique personnelle, soit par des mécanismes d'apprentissage en travaillant auprès d'un mentor qui lui enseignera des éléments plus avancés que ceux déjà connus, soit en suivant une formation qui fixera des objectifs pédagogiques adaptés.    N'étant pas lui-même un support pédagogique, le référentiel n'a pas vocation à recenser l'intégralité des savoirs-faires qui composent une compétence donnée, mais simplement de fournir des pointeurs vers les ressources documentaires, lorsqu'elles existent, qui font autorité. Par exemple, le livre de Martin Fowler qui définit plusieurs dizaines de refactorings élémentaires. La connaissance encyclopédique de tous ces refactorings n'est certes pas une exigence pour pouvoir prétendre maîtriser le sujet, mais d'évidence l'une des choses qui distinguera un expert d'un débutant sera le nombre de ces refactorings qu'il est capable d'utiliser à bon escient.

    ## Place aux pratiques!

    Vous voilà maintenant équipés pour tirer le meilleur parti de cet outil. Bonne lecture! N'oubliez pas son pendant sur le Web, constamment actualisé:

    http://referentiel.institut-agile.fr/